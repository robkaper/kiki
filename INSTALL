!!! WARNING !!!

Potential users are advised to update and test in a development or staging
environment prior to deployment.

Kiki is not intended to be installed by end users, but with basic skills you 
should be able to figure it out with these instructions.

Install source files
--------------------

Place the Kiki source tree somewhere on your filesystem. Any location is
fine, as long as your web server user (usually www-data) has read access.

  git clone https://github.com/robkaper/kiki.git

or

  git clone git@github.com:robkaper/kiki.git

or download:

  https://github.com/robkaper/kiki/archive/refs/heads/master.zip

and unzip it where you want it to be.

Create required files and directories
-------------------------------------

* Required: website root

Kiki assumes a domain-based site root under /var/www/$server_name
Create it with read access for your web server user.

  mkdir -p /var/www/example.com/htdocs
  chgrp www-data /var/www/example.com/htdocs && chmod g+r /var/www/example.com/htdocs

You should link the Kiki router file into your web root.

  cd /var/www/example.com/htdocs && ln -s /var/www/kiki/htdocs/router.php

* Required: configuration file

Directly in your site root, create a file called config.php with read access
for your web server user.

  cd /var/www/example.com
  touch config.php
  chgrp www-data config.php && chmod g+r config.php

See: config/config.php-sample

* Recommended: storage directory

Directly in your site root, create a file storage directory with write
access for your web server user.

  cd /var/www/example.com
  mkdir storage
  chgrp www-data storage && chmod g+w storage

* Optional: debug file(s)

To a log/ directory in your site root, create a directory with write access
for your webserver user.

  cd /var/www/example.com
  mkdir log
  chgrp www-data log && chmod g+w log

Kiki works pretty well as console framework as well. The Log class will use
kiki-debug-www.txt for all webserver activity and kiki-debug-$user.txt when
included in CLI scripts.

Config::$debug must be set to true to enable debug logging. If you do so
without having a writeable log/ directory, Kiki will send debug messages to
the webserver through error_log().

* Optional: paths for custom classes and template files

You can (and are encouraged to) use your own classes and templates by placing them into the appropriate paths:

  cd /var/www/example.com
  mkdir -p lib/controller/
  mkdir -p templates
  chgrp -R www-data lib templates && chmod -R g+w lib templates

Kiki's class loader checks your local path before the Kiki installation
path, so you cannot just add classes or templates, but also override the
Kiki defaults where desired.

Configure your virtual host
---------------------------

Nginx: you might have to tweak things a little bit, but an example based on
what I'm using myself is included as config/nginx/site.conf

Apache: these instructions haven't been updated since I've moved to Nginx,
but should be somewhat accurate.  Edit config/apache/htaccess and adjust to
match your Kiki install path and site root.  Then place the contents in your
VirtualHost directive.

Note: this setup has only been tested within the Apache configuration
itself, not as .htaccess file.  I don't intent to support .htaccess files,
or in general, environments where there is no full control over the web
server environment.

Install required modules and database schema
--------------------------------------------

Kiki offers a status page, available as http://example.com/kiki/ 

This page lists (and checks) required PHP modules and extensions, tests your
database configuration, and installs or updates your data model. Run it
after installation.

Callback URLs
-------------

If you're going to use the Twitter connection, you must configure a callback
URL in your Twitter application to avoid PIN requests.  You can set it to
any value: it is not actually being used as Kiki sets the callback URL
itself in all requests.  You just cannot leave it empty.

Custom modules
--------------

You can easily create your own custom controller modules within Kiki. 

To create a module named Foo, the following are required:

- A file /var/www/example.com/lib/controller/foo.php (check lib/controller/examples/helloworld.php for an example)
- A class named Foo within that file, extending the Kiki\Controller class

See lib/controller/examples/ in the Kiki install path.

To start using a custom module, create a route to it in the sections table.

// FIXME: this should be automated with an Add Section CMS module.

// FIXME: no, actually, this should probably be a configuration file as this
// framework should be useable without a database.
